Collection (s9e\TextFormatter\Tests\Configurator\Collections\Collection)
 [x] Collection is countable
 [x] Collection is iterable with foreach
 [x] clear() empties the collection
 [x] asConfig() returns the items as an array

Normalized Collection (s9e\TextFormatter\Tests\Configurator\Collections\NormalizedCollection)
 [x] set() calls normalizeKey()
 [x] set() calls normalizeValue()
 [x] add() calls normalizeKey()
 [x] add() calls normalizeValue()
 [x] add() can be called without a second parameter
 [x] add() throws a RuntimeException if the item already exists
 [x] exists() returns TRUE if the item exists
 [x] exists() returns FALSE if the item does not exist
 [x] exists() calls normalizeKey()
 [x] exists() ignores InvalidArgumentException from normalizeKey()
 [x] get() returns an item by name
 [x] get() calls normalizeKey()
 [x] get() throws a RuntimeException if the item does not exist
 [x] delete() removes an item by name
 [x] delete() calls the item's normalizeKey() method
 [x] delete() ignores InvalidArgumentException from normalizeKey()
 [x] isset($collection['foo']) maps to $collection->exists('foo')
 [x] $collection['foo'] maps to $collection->get('foo')
 [x] $collection['foo'] = 42 maps to $collection->set('foo', 42)
 [x] unset($collection['foo']) maps to $collection->delete('foo')
 [x] contains() returns true if the given value is present in the collection
 [x] contains() returns false if the given value is not present in the collection
 [x] contains() checks for equality, not identity
 [x] indexOf() returns the key if the given value is present in the collection
 [x] indexOf() returns false if the given value is not present in the collection
 [x] indexOf() checks for equality, not identity
 [x] onDuplicate() can be called with no value
 [x] onDuplicate() returns 'error' by default
 [x] onDuplicate() returns the previous value
 [x] onDuplicate('unknownvalue') throws an exception
 [x] add() has no effect on duplicates if the onDuplicate action is "ignore"
 [x] add() returns the original element when trying to add a duplicate and the onDuplicate action is "ignore"
 [x] add() replaces the original element if the onDuplicate action is "replace"
 [x] add() throws a RuntimeException on duplicate elements if the onDuplicate action is "error"
 [x] asConfig() returns the elements in lexical order

Normalized List (s9e\TextFormatter\Tests\Configurator\Collections\NormalizedList)
 [x] append() adds the value at the end of the list
 [x] $normalizedList[] = 'foo' maps to $normalizedList->append('foo')
 [x] prepend() adds the value at the beginning of the list
 [x] insert() inserts the value at given offset
 [x] insert() can insert value that is an array
 [x] Negative offsets count from the end of the list
 [x] insert() throws an exception if the offset is out of bounds
 [x] $normalizedList[0] = 'foo' replaces the first value of the list if it exists
 [x] $normalizedList[0] = 'foo' appends to the list if it's empty
 [x] $normalizedList[1] = 'foo' throws an InvalidArgumentException if the list is empty
 [x] $normalizedList['foo'] = 'bar' throws an InvalidArgumentException
 [x] Deleting a value by key reorders the list to remove gaps
 [x] add() adds given value at the end of the list
 [x] remove() removes given value from the collection
 [x] remove() removes all items matching given value
 [x] remove() returns the number of items removed
 [x] remove() reorders the list to remove gaps

Collection Proxy (s9e\TextFormatter\Tests\Configurator\Traits\CollectionProxy)
 [x] $proxy->add() gets forwarded to $proxy->collection->add() with all arguments
 [x] $proxy->add() returns the value returned by $proxy->collection->add()
 [x] $proxy->exists() gets forwarded to $proxy->collection->exists() with all arguments
 [x] $proxy->delete() gets forwarded to $proxy->collection->delete() with all arguments
 [x] $proxy->get() gets forwarded to $proxy->collection->get() with all arguments
 [x] $proxy->get() returns the value returned by $proxy->collection->get()
 [x] $proxy->set() gets forwarded to $proxy->collection->set() with all arguments
 [x] $proxy->set() returns the value returned by $proxy->collection->set()
 [x] $proxy['foo'] returns $proxy->collection['foo']
 [x] $proxy['foo'] = 42 sets $proxy->collection['foo'] = 42
 [x] isset($proxy['foo']) returns isset($proxy->collection['foo'])
 [x] unset($proxy['foo']) calls unset($proxy->collection['foo'])
 [x] count($proxy) returns count($proxy->collection)
 [x] A collection proxy is iterable with foreach

Configurable (s9e\TextFormatter\Tests\Configurator\Traits\Configurable)
 [x] __get('foo') calls getFoo() if it exists
 [x] __get($k) returns the property if it exists
 [x] __get() throws a RuntimeException if the property does not exist
 [x] __get($k) returns null if the property is null
 [x] __set('foo', 'bar') calls setFoo('bar') if it exists
 [x] __set() can create new properties
 [x] __set() can replace an instance of Foo with another instance of Foo
 [x] __set() can replace an instance of Foo with an instance of FooPlus, which extends Foo
 [x] __set() throws an exception if an instance of Foo would be replaced by an instance of Bar
 [x] __set() can replace a scalar value with a value of the same type
 [x] __set() can replace a scalar value with another scalar value if it can be losslessly cast to the same type
 [x] __set() can replace a boolean value by changing the string "true" to boolean true
 [x] __set() can replace a boolean value by changing the string "false" to boolean false
 [x] __set() throws an exception if a scalar value would be overwritten by a scalar value that cannot be losslessly cast to the same type
 [x] __set() will clear and repopulate a NormalizedCollection rather than overwrite it
 [x] __set() throws an exception if a NormalizedCollection would be overwritten by a non-array, non-Traversable value
 [x] __isset('foo') calls issetFoo() if it exists
 [x] __isset($k) returns true if the property exists
 [x] __unset('foo') calls unsetFoo() if it exists
 [x] __unset('foo') calls unsetFoo() even if the property does not exist
 [x] __unset('foo') calls $this->foo->clear() if it's an instance of Collection
 [x] __unset('foo') has no effect unsetFoo() does not exist and the the property is not set
 [x] __unset('foo') throws an exception if unsetFoo() does not exist and the property is set

Template Safeness (s9e\TextFormatter\Tests\Configurator\Traits\TemplateSafeness)
 [x] isSafeAsURL() returns false by default
 [x] isSafeAsURL() returns true if markAsSafeAsURL() was called
 [x] isSafeInCSS() returns false by default
 [x] isSafeInCSS() returns true if markAsSafeInCSS() was called
 [x] isSafeInJS() returns false by default
 [x] isSafeInJS() returns true if markAsSafeInJS() was called
 [x] markAsSafeAsURL() is chainable
 [x] markAsSafeInCSS() is chainable
 [x] markAsSafeInJS() is chainable
 [x] resetSafeness() resets the contexts marked as safe
 [x] resetSafeness() is chainable

Configurator (s9e\TextFormatter\Tests\Configurator)
 [x] $configurator->attributeFilters is an instance of AttributeFilterCollection
 [x] $configurator->bundleGenerator is an instance of BundleGenerator
 [x] $configurator->javascript unset by default
 [x] $configurator->enableJavaScript() creates an instance of JavaScript stored in $configurator->javascript
 [x] $configurator->enableJavaScript() does not overwrite the current instance of the JavaScript object
 [x] $configurator->plugins is an instance of PluginCollection
 [x] $configurator->registeredVars is a publicly accessible array
 [x] $configurator->rendering is an instance of Rendering
 [x] $configurator->rootRules is an instance of Ruleset
 [x] $configurator->rulesGenerator is an instance of RulesGenerator
 [x] $configurator->tags is an instance of TagCollection
 [x] $configurator->templateChecker is an instance of TemplateChecker
 [x] $configurator->templateNormalizer is an instance of TemplateNormalizer
 [x] asConfig() does not call finalize() before retrieving the plugins' config
 [x] asConfig() returns an array with a rootContext element
 [x] asConfig() returns an array with a registeredVars element that contains urlConfig
 [x] asConfig() returns all registeredVars including empty arrays
 [x] asConfig() adds regexpLimit to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimit from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds quickMatch to the plugin's configuration if available
 [x] asConfig() omits a plugin's quickMatch if it's false
 [x] asConfig() adds allowedChildren and allowedDescendants bitfields to each tag
 [x] Removes JavaScript-specific data from tag filters
 [x] Removes JavaScript-specific data from attribute filters
 [x] $configurator->BBCodes returns an instance of the BBCodes plugin's configurator, and loads it if applicable
 [x] isset($configurator->BBCodes) returns whether the BBCodes plugin is loaded
 [x] unset($configurator->BBCodes) unloads the BBCodes plugin
 [x] Setting $configurator->Foo adds Foo to the plugins collection
 [x] isset($configurator->foo) returns false if the var "foo" is not registered
 [x] isset($configurator->foo) returns true if $configurator->registeredVars['foo'] exists
 [x] $configurator->foo returns $configurator->registeredVars['foo'] if it exists
 [x] $configurator->foo throws an exception if $configurator->registeredVars['foo'] does not exist
 [x] unset($configurator->foo) unsets $configurator->registeredVars['foo']
 [x] Setting $configurator->foo sets $this->configurator->registeredVars['foo']
 [x] finalize() adds root rules
 [x] finalize() adds tag rules
 [x] finalize() does not overwrite boolean tag rules
 [x] loadBundle('../Invalid') throws an exception
 [x] loadBundle('Forum') adds the Forum bundle's configuration
 [x] saveBundle('Foo', '/tmp/foo') saves a bundle Foo to /tmp/foo
 [x] saveBundle() returns true on success
 [x] saveBundle() returns false on failure
 [x] finalize() returns a parser and a renderer
 [x] finalize() does not return a JS parser by default
 [x] finalize() returns a JS parser if JavaScript was enabled
 [x] finalize() calls each plugin's finalize()
 [x] finalize() calls each plugin's finalize() once, even if JavaScript is enabled

Attribute Collection (s9e\TextFormatter\Tests\Configurator\Collections\AttributeCollection)
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\Attribute
 [x] add() normalizes the attribute name
 [x] delete() normalizes the attribute name
 [x] exists() normalizes the attribute name
 [x] get() normalizes the attribute name
 [x] set() normalizes the attribute name
 [x] Replaces duplicates by default
 [x] Throws an meaningful exception message when creating an Attribute that already exists
 [x] Throws an exception when accessing an Attribute that does not exist

Attribute Filter Chain (s9e\TextFormatter\Tests\Configurator\Collections\AttributeFilterChain)
 [x] append() throws an InvalidArgumentException on invalid callbacks
 [x] prepend() throws an InvalidArgumentException on invalid callbacks
 [x] append() throws an InvalidArgumentException on uncallable callbacks
 [x] prepend() throws an InvalidArgumentException on uncallable callbacks
 [x] PHP string callbacks are normalized to an instance of AttributeFilter
 [x] PHP array callbacks are normalized to an instance of AttributeFilter
 [x] Default filters such as "#int" are normalized to an instance of the corresponding AttributeFilter
 [x] Instances of AttributeFilter are added as-is
 [x] Automatically parses callback parameters

Attribute Filter Collection (s9e\TextFormatter\Tests\Configurator\Collections\AttributeFilterCollection)
 [x] Filter names that start with # are normalized to lowercase
 [x] set() accepts instances of AttributeFilter as-is
 [x] set() accepts a valid callback and returns an instance of AttributeFilter
 [x] set() throws an exception if value is not a valid callback or an instance of AttributeFilter
 [x] get() automatically loads built-in filters if no filter was set
 [x] get() does not overwrite custom filters with built-in filters
 [x] get() automatically creates filters whose name is a valid PHP callback if no filter was set
 [x] get() does not overwrite custom filters with auto-generated callback filters
 [x] get() throws an exception if the filter name is neither callable not starts with # and is entirely composed of letters and digits
 [x] get() throws an exception on unknown filter
 [x] get() returns a clone of the filter, not the original instance

Attribute List (s9e\TextFormatter\Tests\Configurator\Collections\AttributeList)
 [x] Attribute names are normalized for storage
 [x] Attribute names are normalized during retrieval
 [x] asConfig() returns a deduplicated list of attribute names
 [x] asConfig() returns a list of attribute names in alphabetical order

Attribute Preprocessor Collection (s9e\TextFormatter\Tests\Configurator\Collections\AttributePreprocessorCollection)
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\AttributePreprocessor
 [x] asConfig() returns a list of [attrName, Regexp instance, map] arrays
 [x] Is iterable with foreach
 [x] Uses the name of the source attribute as key when iterating
 [x] merge() accepts a 2D array of regexps
 [x] merge() accepts a 2D array of AttributePreprocessor instances
 [x] merge() accepts an instance of AttributePreprocessorCollection to copy its content
 [x] merge() throws an exception when passed a non-array, non-AttributProcessorCollection
 [x] merge() throws an exception when passed a one-dimensional array

Hostname List (s9e\TextFormatter\Tests\Configurator\Collections\HostnameList)
 [x] asConfig() returns null if the collection is empty
 [x] asConfig() returns a Regexp
 [x] asConfig() returns a regexp that matches its hostnames
 [x] IDNs are punycoded if idn_to_ascii() is available
 [x] add('*.example.org') matches 'www.example.org'
 [x] add('example.org') does not match 'www.example.org'
 [x] add('example.*') matches 'example.org'
 [x] add('example') does not match 'example.org'

Minifier List (s9e\TextFormatter\Tests\Configurator\Collections\MinifierList)
 [x] add() normalizes minifier names to instances of s9e\TextFormatter\Configurator\JavaScript\Minifiers if applicable
 [x] add() throws an exception when the value is neither a Minifier instance nor a known minifier
 [x] add() throws an exception when the value is a boolean
 [x] add() accepts an array
 [x] add() accepts an array that contains the minifier's name followed by any number of arguments to be passed to the constructor

Plugin Collection (s9e\TextFormatter\Tests\Configurator\Collections\PluginCollection)
 [x] load() can load a stock plugin
 [x] load() throws an exception if the stock plugin does not exist
 [x] Accepts an object that implements ConfiguratorBase
 [x] Accepts a string that is the name of a class that implements ConfiguratorBase
 [x] Throws an exception if the value is neither an instance of or the name of a class that implements ConfiguratorBase
 [x] Throws an exception if the plugin name is not entirely composed of letters, numbers and underscores
 [x] Throws an exception if the plugin name does not start with an uppercase letter
 [x] asConfig() does not return an entry for plugins whose asConfig() returns NULL
 [x] asConfig() returns an entry for plugins whose asConfig() returns an empty array
 [x] asConfig() adds regexpLimit to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimit from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds quickMatch to the plugin's configuration if available
 [x] asConfig() omits a plugin's quickMatch if it's false
 [x] asConfig() removes className from the plugin's configuration if it's using its default value
 [x] asConfig() preserves className from the plugin's configuration if it's using a custom value
 [x] finalize() calls every plugin's finalize() method

Ruleset (s9e\TextFormatter\Tests\Configurator\Collections\Ruleset)
 [x] Setting an unknown rule throws an exception
 [x] isset($ruleset['allowChild']) tests whether any allowChild rules exist
 [x] $ruleset['allowChild'] returns the allowChild rules if they exist
 [x] Trying to set rules via array access throws a RuntimeException
 [x] unset($ruleset['allowChild']) removes all allowChild rules but doesn't touch the rest
 [x] clear() removes all rules
 [x] remove('allowChild') removes only 'allowChild' rules
 [x] remove('denyChild', 'IMG') removes all denyChild rules targeting IMG
 [x] remove('denyChild', 'IMG') unsets the denyChild list in the ruleset if there is no denyChild rules left
 [x] remove('denyChild', 'IMG') rearranges keys to remove gaps
 [x] remove('denyChild', 'img') normalizes tag names
 [x] remove('defaultChildRule') throws an InvalidArgumentException
 [x] remove('defaultDescendantRule') throws an InvalidArgumentException
 [x] allowChild() throws an exception on invalid tag name
 [x] allowChild() normalizes tag names
 [x] allowChild() is chainable
 [x] allowDescendant() throws an exception on invalid tag name
 [x] allowDescendant() normalizes tag names
 [x] allowDescendant() is chainable
 [x] autoClose() accepts a boolean
 [x] autoClose() throws an exception if its argument is not a boolean
 [x] autoClose() is chainable
 [x] autoReopen() accepts a boolean
 [x] autoReopen() throws an exception if its argument is not a boolean
 [x] autoReopen() is chainable
 [x] breakParagraph() accepts a boolean
 [x] breakParagraph() throws an exception if its argument is not a boolean
 [x] breakParagraph() is chainable
 [x] closeAncestor() throws an exception on invalid tag name
 [x] closeAncestor() normalizes tag names
 [x] closeParent() normalizes tag names
 [x] closeParent() is chainable
 [x] createChild() throws an exception on invalid tag name
 [x] createChild() normalizes tag names
 [x] createChild() is chainable
 [x] createParagraphs() accepts a boolean
 [x] createParagraphs() throws an exception if its argument is not a boolean
 [x] createParagraphs() is chainable
 [x] ignoreTags() accepts a boolean
 [x] ignoreTags() throws an exception if its argument is not a boolean
 [x] ignoreTags() is chainable
 [x] denyChild() throws an exception on invalid tag name
 [x] denyChild() normalizes tag names
 [x] denyChild() is chainable
 [x] denyDescendant() throws an exception on invalid tag name
 [x] denyDescendant() normalizes tag names
 [x] denyDescendant() is chainable
 [x] disableAutoLineBreaks() accepts a boolean
 [x] disableAutoLineBreaks() throws an exception if its argument is not a boolean
 [x] disableAutoLineBreaks() is chainable
 [x] enableAutoLineBreaks() accepts a boolean
 [x] enableAutoLineBreaks() throws an exception if its argument is not a boolean
 [x] enableAutoLineBreaks() is chainable
 [x] fosterParent() throws an exception on invalid tag name
 [x] fosterParent() normalizes tag names
 [x] fosterParent() is chainable
 [x] ignoreText() accepts a boolean
 [x] ignoreText() throws an exception if its argument is not a boolean
 [x] ignoreText() is chainable
 [x] isTransparent() accepts a boolean
 [x] isTransparent() throws an exception if its argument is not a boolean
 [x] isTransparent() is chainable
 [x] ignoreSurroundingWhitespace() accepts a boolean
 [x] ignoreSurroundingWhitespace() throws an exception if its argument is not a boolean
 [x] ignoreSurroundingWhitespace() is chainable
 [x] preventLineBreaks() accepts a boolean
 [x] preventLineBreaks() throws an exception if its argument is not a boolean
 [x] preventLineBreaks() is chainable
 [x] requireAncestor() throws an exception on invalid tag name
 [x] requireAncestor() normalizes tag names
 [x] requireAncestor() is chainable
 [x] requireParent() throws an exception on invalid tag name
 [x] requireParent() normalizes tag names
 [x] requireParent() is chainable
 [x] suspendAutoLineBreaks() accepts a boolean
 [x] suspendAutoLineBreaks() throws an exception if its argument is not a boolean
 [x] suspendAutoLineBreaks() is chainable
 [x] trimFirstLine() accepts a boolean
 [x] trimFirstLine() throws an exception if its argument is not a boolean
 [x] trimFirstLine() is chainable
 [x] merge() accepts a 2D array of rules
 [x] merge() correctly copies the isTransparent setting from an array
 [x] merge() accepts an instance of Ruleset to copy its content
 [x] merge() correctly copies the isTransparent setting from an instance of Ruleset
 [x] merge() throws an InvalidArgumentException if its argument is not an array or an instance of Ruleset
 [x] merge() overwrites boolean rules by default
 [x] merge() does not overwrite boolean rules if its second argument is FALSE
 [x] asConfig() does not return rules that are not used during parsing
 [x] asConfig() uses target names as keys for closeAncestor
 [x] asConfig() uses target names as keys for closeParent
 [x] asConfig() uses target names as keys for requireAncestor
 [x] asConfig() packs boolean rules in a value named "flags"
 [x] asConfig() can pack multiple boolean rules in a value named "flags"

Rules Generator List (s9e\TextFormatter\Tests\Configurator\Collections\RulesGeneratorList)
 [x] add() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\RulesGenerators
 [x] add() adds BooleanRulesGenerator instances as-is
 [x] add() adds TargetedRulesGenerator instances as-is
 [x] add() throws an exception on invalid values

Scheme List (s9e\TextFormatter\Tests\Configurator\Collections\SchemeList)
 [x] asConfig() returns an instance of Regexp
 [x] asConfig() returns a regexp that matches all the allowed schemes in the default variant
 [x] asConfig() creates a case-insensitive regexp that matches the schemes in the collection
 [x] add('*invalid*') throws an exception
 [x] add() normalizes schemes to lowercase

Tag Collection (s9e\TextFormatter\Tests\Configurator\Collections\TagCollection)
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\Tag
 [x] add() normalizes the tag name
 [x] delete() normalizes the tag name
 [x] exists() normalizes the tag name
 [x] get() normalizes the tag name
 [x] set() normalizes the tag name
 [x] Replaces duplicates by default
 [x] Throws an meaningful exception message when creating a Tag that already exists
 [x] Throws an exception when accessing a Tag that does not exist

Tag Filter Chain (s9e\TextFormatter\Tests\Configurator\Collections\TagFilterChain)
 [x] append() throws an InvalidArgumentException on invalid callbacks
 [x] prepend() throws an InvalidArgumentException on invalid callbacks
 [x] append() throws an InvalidArgumentException on uncallable callbacks
 [x] prepend() throws an InvalidArgumentException on uncallable callbacks
 [x] PHP string callbacks are normalized to an instance of TagFilter
 [x] PHP array callbacks are normalized to an instance of TagFilter
 [x] Instances of TagFilter are added as-is
 [x] containsCallback('s9e\\TextFormatter\\Parser\\FilterProcessing::filterAttributes') returns true on default tags
 [x] containsCallback('s9e\\TextFormatter\\Parser\\FilterProcessing::filterAttributes') returns false on empty chains

Tag List (s9e\TextFormatter\Tests\Configurator\Collections\TagList)
 [x] Tag names are normalized for storage
 [x] Tag names are normalized during retrieval
 [x] asConfig() returns a deduplicated list of tag names
 [x] asConfig() returns a list of tag names in alphabetical order

Template Check List (s9e\TextFormatter\Tests\Configurator\Collections\TemplateCheckList)
 [x] append() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\TemplateChecks
 [x] append() adds instances of s9e\TextFormatter\Configurator\TemplateCheck as-is

Template Normalization List (s9e\TextFormatter\Tests\Configurator\Collections\TemplateNormalizationList)
 [x] append() normalizes a callback into an instance of s9e\TextFormatter\Configurator\TemplateNormalizations\Custom
 [x] append() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\TemplateNormalizations
 [x] append() adds instances of s9e\TextFormatter\Configurator\TemplateNormalization as-is

Template Parameter Collection (s9e\TextFormatter\Tests\Configurator\Collections\TemplateParameterCollection)
 [x] add('foo') adds parameter 'foo' with an empty value
 [x] add('foo', 1) adds parameter 'foo' with value '1'
 [x] add('foo bar') throws an exception

Unsafe Template Exception (s9e\TextFormatter\Tests\Configurator\UnsafeTemplateException)
 [x] getNode() returns the stored node
 [x] setNode() sets the stored node
 [x] highlightNode() returns the template's source formatted and with the stored node highlighted with data set #0
 [x] highlightNode() returns the template's source formatted and with the stored node highlighted with data set #1
 [x] highlightNode() returns the template's source formatted and with the stored node highlighted with data set #2

AVTHelper (s9e\TextFormatter\Tests\Configurator\Helpers\AVTHelper)
 [x] parse() tests with data set #0
 [x] parse() tests with data set #1
 [x] parse() tests with data set #2
 [x] parse() tests with data set #3
 [x] parse() tests with data set #4
 [x] parse() tests with data set #5
 [x] parse() tests with data set #6
 [x] parse() tests with data set #7
 [x] parse() tests with data set #8
 [x] parse() tests with data set #9
 [x] parse() tests with data set #10
 [x] parse() tests with data set #11
 [x] serialize() tests with data set #0
 [x] serialize() tests with data set #1
 [x] serialize() tests with data set #2
 [x] serialize() tests with data set #3
 [x] serialize() tests with data set #4
 [x] serialize() tests with data set #5
 [x] replace() tests with data set #0
 [x] replace() tests with data set #1
 [x] replace() tests with data set #2
 [x] toXSL() tests with data set #0
 [x] toXSL() tests with data set #1
 [x] toXSL() tests with data set #2
 [x] toXSL() tests with data set #3
 [x] toXSL() tests with data set #4
 [x] toXSL() tests with data set #5
 [x] toXSL() tests with data set #6
 [x] toXSL() tests with data set #7
 [x] toXSL() tests with data set #8

Config Helper (s9e\TextFormatter\Tests\Configurator\Helpers\ConfigHelper)
 [x] filterConfig() filters for the right target
 [x] filterConfig() recurses into deep arrays
 [x] filterConfig() recurses with the correct target
 [x] filterConfig() ignores instances of FilterableConfigValue that return NULL
 [x] filterConfig() preserves instances of Dictionary with an array if the variant is JS
 [x] generateQuickMatchFromList() returns the longest common substring of a list of strings
 [x] generateQuickMatchFromList() returns a string even if it contains only digit characters
 [x] generateQuickMatchFromList() returns FALSE if no common substring is found
 [x] generateQuickMatchFromList() compares strings as bytes and returns a binary string
 [x] toArray() works with deep arrays
 [x] toArray() calls asConfig() for objects in deep arrays that implement ConfigProvider
 [x] toArray() throws an exception for objects in deep arrays that are not Traversable and do not implement ConfigProvider
 [x] toArray() omits empty arrays from values
 [x] toArray() preserves empty arrays if its second argument is TRUE
 [x] toArray() preserves empty arrays in deep arrays if its second argument is TRUE
 [x] toArray() omits NULL values
 [x] toArray() omits NULL values from asConfig() calls
 [x] toArray() preserves NULL values if its third argument is TRUE
 [x] toArray() preserves NULL values in deep arrays if its third argument is TRUE
 [x] optimizeArray() reduces the size of a serialized config

Context Safeness (s9e\TextFormatter\Tests\Configurator\Helpers\ContextSafeness)
 [x] getDisallowedCharactersAsURL() returns a list of strings
 [x] getDisallowedCharactersInCSS() returns a list of strings
 [x] getDisallowedCharactersInJS() returns a list of strings

Filter Helper (s9e\TextFormatter\Tests\Configurator\Helpers\FilterHelper)
 [x] isAllowed() tests with data set #0
 [x] isAllowed() tests with data set #1
 [x] isAllowed() tests with data set #2
 [x] isAllowed() tests with data set #3
 [x] isAllowed() tests with data set #4
 [x] isAllowed() tests with data set #5
 [x] parse() tests with data set #0
 [x] parse() tests with data set #1
 [x] parse() tests with data set #2
 [x] parse() tests with data set #3

Filter Syntax Matcher (s9e\TextFormatter\Tests\Configurator\Helpers\FilterSyntaxMatcher)
 [x] parse() tests with data set #0
 [x] parse() tests with data set #1
 [x] parse() tests with data set #2
 [x] parse() tests with data set #3
 [x] parse() tests with data set #4
 [x] parse() tests with data set #5
 [x] parse() tests with data set #6
 [x] parse() tests with data set #7
 [x] parse() tests with data set #8
 [x] parse() tests with data set #9
 [x] parse() tests with data set #10
 [x] parse() tests with data set #11
 [x] parse() tests with data set #12
 [x] parse() tests with data set #13
 [x] parse() tests with data set #14
 [x] parse() tests with data set #15
 [x] parse() tests with data set #16
 [x] parse() tests with data set #17
 [x] parse() tests with data set #18
 [x] parse() tests with data set #19
 [x] parse() tests with data set #20
 [x] parse() tests with data set #21
 [x] parse() tests with data set #22
 [x] parse() tests with data set #23
 [x] parse() tests with data set #24
 [x] parse() tests with data set #25
 [x] parse() tests with data set #26
 [x] parse() tests with data set #27
 [x] parse() tests with data set #28
 [x] parse() tests with data set #29
 [x] parse() tests with data set #30
 [x] parse() tests with data set #31
 [x] parse() tests with data set #32
 [x] parse() tests with data set #33
 [x] parse() tests with data set #34

Element Inspector (s9e\TextFormatter\Tests\Configurator\Helpers\ElementInspector)
 [x] Test cases with data set #0
 [x] Test cases with data set #1
 [x] Test cases with data set #2
 [x] Test cases with data set #3
 [x] Test cases with data set #4
 [x] Test cases with data set #5
 [x] Test cases with data set #6
 [x] Test cases with data set #7
 [x] Test cases with data set #8
 [x] Test cases with data set #9
 [x] Test cases with data set #10
 [x] Test cases with data set #11
 [x] Test cases with data set #12
 [x] Test cases with data set #13
 [x] Test cases with data set #14
 [x] Test cases with data set #15
 [x] Test cases with data set #16
 [x] Test cases with data set #17
 [x] Test cases with data set #18
 [x] Test cases with data set #19
 [x] Test cases with data set #20
 [x] Test cases with data set #21
 [x] Test cases with data set #22
 [x] Test cases with data set #23
 [x] Test cases with data set #24
 [x] Test cases with data set #25
 [x] Test cases with data set #26
 [x] Test cases with data set #27
 [x] Test cases with data set #28

Node Locator (s9e\TextFormatter\Tests\Configurator\Helpers\NodeLocator)
 [x] getObjectParamsByRegexp() tests with data set #0
 [x] getObjectParamsByRegexp() tests with data set #1
 [x] getObjectParamsByRegexp() tests with data set #2
 [x] getObjectParamsByRegexp() tests with data set #3
 [x] getObjectParamsByRegexp() tests with data set #4
 [x] getObjectParamsByRegexp() tests with data set #5
 [x] getObjectParamsByRegexp() tests with data set #6
 [x] getObjectParamsByRegexp() tests with data set #7
 [x] getCSSNodes() tests with data set #0
 [x] getCSSNodes() tests with data set #1
 [x] getCSSNodes() tests with data set #2
 [x] getCSSNodes() tests with data set #3
 [x] getCSSNodes() tests with data set #4
 [x] getCSSNodes() tests with data set #5
 [x] getCSSNodes() tests with data set #6
 [x] getCSSNodes() tests with data set #7
 [x] getCSSNodes() tests with data set #8
 [x] getCSSNodes() tests with data set #9
 [x] getJSNodes() tests with data set #0
 [x] getJSNodes() tests with data set #1
 [x] getJSNodes() tests with data set #2
 [x] getJSNodes() tests with data set #3
 [x] getJSNodes() tests with data set #4
 [x] getJSNodes() tests with data set #5
 [x] getJSNodes() tests with data set #6
 [x] getJSNodes() tests with data set #7
 [x] getJSNodes() tests with data set #8
 [x] getJSNodes() tests with data set #9
 [x] getJSNodes() tests with data set #10
 [x] getURLNodes() tests with data set #0
 [x] getURLNodes() tests with data set #1
 [x] getURLNodes() tests with data set #2
 [x] getURLNodes() tests with data set #3
 [x] getURLNodes() tests with data set #4
 [x] getURLNodes() tests with data set #5
 [x] getURLNodes() tests with data set #6
 [x] getURLNodes() tests with data set #7
 [x] getURLNodes() tests with data set #8
 [x] getURLNodes() tests with data set #9
 [x] getURLNodes() tests with data set #10
 [x] getURLNodes() tests with data set #11
 [x] getURLNodes() tests with data set #12
 [x] getURLNodes() tests with data set #13
 [x] getURLNodes() tests with data set #14
 [x] getURLNodes() tests with data set #15
 [x] getURLNodes() tests with data set #16
 [x] getURLNodes() tests with data set #17
 [x] getURLNodes() tests with data set #18
 [x] getURLNodes() tests with data set #19
 [x] getURLNodes() tests with data set #20
 [x] getURLNodes() tests with data set #21
 [x] getElementsByRegexp() can return elements created via <xsl:copy-of/>

Regexp Builder (s9e\TextFormatter\Tests\Configurator\Helpers\RegexpBuilder)
 [x] fromList(['foo']) returns 'foo'
 [x] fromList(['foo', 'foo']) returns 'foo'
 [x] fromList(['FOO', 'foo']) returns '(?:FOO|foo)'
 [x] fromList(['FOO', 'foo'], ["caseInsensitive" => true]) returns 'foo'
 [x] fromList(['a']) returns 'a'
 [x] fromList(['a', 'a']) returns 'a'
 [x] fromList(['/']) returns '\\/'
 [x] fromList(['/'], ["delimiter" => "#"]) returns '/'
 [x] fromList(['#'], ["delimiter" => "#"]) returns '\\#'
 [x] fromList(['apple', 'april']) returns 'ap(?:ple|ril)'
 [x] fromList(['bar', 'baz']) returns 'ba[rz]'
 [x] fromList(['foo', 'fool']) returns 'fool?'
 [x] fromList(['ax', 'axed']) returns 'ax(?:ed)?'
 [x] fromList(['!', '#', '$', '(', ')', '*', '+', '-', '.', '/', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}']) returns '[!#$(-+\\--\\/:<-?[-\\^{-}]'
 [x] fromList([':)', ':(', ':]', ':[', ':|', ':/', ':\\']) returns ':[()\\/[-\\]|]'
 [x] fromList(['xy', '^y'], ["specialChars" => ["^" => "^"]]) returns '(?:^|x)y'
 [x] fromList(['xy', 'x$'], ["specialChars" => ["$" => "$"]]) returns 'x(?:$|y)'
 [x] fromList(['foo', 'bar']) returns '(?:bar|foo)'
 [x] fromList(['a', 'b']) returns '[ab]'
 [x] fromList(['♠', '♣', '♥', '♦']) returns '[♠♣♥♦]'
 [x] fromList(['lock', 'sock']) returns '[ls]ock'
 [x] fromList(['boast', 'boost']) returns 'bo[ao]st'
 [x] fromList(['pest', 'pst']) returns 'pe?st'
 [x] fromList(['boast', 'boost', 'bost']) returns 'bo[ao]?st'
 [x] fromList(['boost', 'best']) returns 'b(?:e|oo)st'
 [x] fromList(['boost', 'bst']) returns 'b(?:oo)?st'
 [x] fromList(['best', 'boost', 'bust']) returns 'b(?:[eu]|oo)st'
 [x] fromList(['boost', 'bst', 'cool']) returns '(?:b(?:oo)?st|cool)'
 [x] fromList(['boost', 'bst', 'cost']) returns '(?:b(?:oo)?|co)st'
 [x] fromList(['aax', 'aay', 'aax', 'aay']) returns 'aa[xy]'
 [x] fromList(['aaax', 'aaay', 'baax', 'baay']) returns '[ab]aa[xy]'
 [x] fromList(['aaax', 'aaay', 'bbaax', 'bbaay']) returns '(?:a|bb)aa[xy]'
 [x] fromList(['aaax', 'aaay', 'aax', 'aay']) returns 'aaa?[xy]'
 [x] fromList(['abx', 'aby', 'cdx', 'cdy']) returns '(?:ab|cd)[xy]'
 [x] fromList(['axx', 'ayy', 'bbxx', 'bbyy']) returns '(?:a|bb)(?:xx|yy)'
 [x] fromList(['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']) returns '(?:a(?:xx|yy|zz)|bb(?:xx|yy)|c)'
 [x] fromList(['ac', 'af', 'bbc', 'bbf', 'c']) returns '(?:a[cf]|bb[cf]|c)'
 [x] fromList(['^example.org$', '.example.org$', '^localhost$', '.localhost$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '(?:\\.|^)(?:example\\.org|localhost)$'
 [x] fromList(['xixix', 'xoxox']) returns 'x(?:ixi|oxo)x'
 [x] fromList(['xixix', 'xixox', 'xoxox', 'xoxix']) returns 'x[io]x[io]x'
 [x] fromList(['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']) returns '(?:a|bb)(?:bar|foo)?'
 [x] fromList(['ax', 'ay', 'bx', 'by']) returns '[ab][xy]'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'c']) returns '(?:[ab][xy]|c)'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'x', 'y']) returns '[ab]?[xy]'
 [x] fromList(['03', '04', '13', '14', '3', '4']) returns '[01]?[34]'
 [x] fromList(['ax', 'ay', 'bbx', 'bby', 'c']) returns '(?:a[xy]|bb[xy]|c)'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']) returns '(?:[ab][xy]|c|dd[xy])'
 [x] fromList(['']) returns ''
 [x] fromList(['', '']) returns ''
 [x] fromList([]) returns ''
 [x] fromList(['ad', 'bd'], ["specialChars" => ["d" => "\\d"]]) returns '[ab]\\d'
 [x] fromList(['a', 'ax', 'ad', 'd', 'dx', 'dd'], ["specialChars" => ["d" => "\\d"]]) returns '[a\\d][\\dx]?'
 [x] fromList(['foo', 'bar', 'y', 'z']) returns '(?:[yz]|bar|foo)'
 [x] fromList(['foo', 'bar', 'baz', 'y', 'z']) returns '(?:[yz]|ba[rz]|foo)'
 [x] fromList(['a', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))'
 [x] fromList(['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:aa|bb)(?:cc|dd)?'
 [x] fromList(['aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy']) returns '(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?'
 [x] fromList(['m.', 'mb'], ["specialChars" => ["." => ".", "b" => "\\b"]]) returns 'm(?:.|\\b)'
 [x] fromList(['m.', 'mB'], ["specialChars" => ["." => ".", "B" => "\\B"]]) returns 'm(?:.|\\B)'
 [x] fromList(['m.', 'mA'], ["specialChars" => ["." => ".", "A" => "\\A"]]) returns 'm(?:.|\\A)'
 [x] fromList(['m.', 'mZ'], ["specialChars" => ["." => ".", "Z" => "\\Z"]]) returns 'm(?:.|\\Z)'
 [x] fromList(['m.', 'mz'], ["specialChars" => ["." => ".", "z" => "\\z"]]) returns 'm(?:.|\\z)'
 [x] fromList(['m.', 'mG'], ["specialChars" => ["." => ".", "G" => "\\G"]]) returns 'm(?:.|\\G)'
 [x] fromList(['m.', 'mQ'], ["specialChars" => ["." => ".", "Q" => "\\Q"]]) returns 'm(?:.|\\Q)'
 [x] fromList(['m.', 'mE'], ["specialChars" => ["." => ".", "E" => "\\E"]]) returns 'm(?:.|\\E)'
 [x] fromList(['m.', 'mK'], ["specialChars" => ["." => ".", "K" => "\\K"]]) returns 'm(?:.|\\K)'
 [x] fromList(['h$', 'h.'], ["specialChars" => ["." => ".", "$" => "$"]]) returns 'h(?:$|.)'
 [x] fromList([':X', ':D', ':P', ':P']) returns ':[DPX]'
 [x] fromList([':X', ':D', ':P', ':p'], ["caseInsensitive" => true]) returns ':[dpx]'
 [x] fromList(['¼', '½']) returns '[¼½]'
 [x] fromList(['¼', '½'], ["unicode" => true]) returns '[¼½]'
 [x] fromList(['¼', '½'], ["unicode" => false]) returns "\xC2[\xBC\xBD]"
 [x] fromList() throws a InvalidArgumentException if any word is not legal UTF-8

Regexp Parser (s9e\TextFormatter\Tests\Configurator\Helpers\RegexpParser)
 [x] parse() can parse plain regexps
 [x] parse() throws a RuntimeException if delimiters can't be parsed
 [x] parse() parses pattern modifiers
 [x] parse() parses character classes
 [x] parse() parses character classes with quantifiers
 [x] parse() parses character classes with quantifiers and greediness operator
 [x] parse() parses character classes that end with an escaped ]
 [x] parse() throws a RuntimeException if a character class is not properly closed
 [x] parse() correctly parses escaped brackets
 [x] parse() correctly parses escaped parentheses
 [x] parse() parses non-capturing subpatterns
 [x] parse() parses non-capturing subpatterns with atomic grouping
 [x] parse() parses non-capturing subpatterns with (possessive) quantifier
 [x] parse() parses non-capturing subpatterns with (ungreedy) quantifier
 [x] parse() parses non-capturing subpatterns with options
 [x] parse() parses option settings
 [x] parse() parses named subpatterns using the (?<name>) syntax
 [x] parse() parses named subpatterns using the (?P<name>) syntax
 [x] parse() parses named subpatterns using the (?'name') syntax
 [x] parse() parses capturing subpatterns
 [x] parse() throws a RuntimeException if an unmatched right parenthesis is found
 [x] parse() throws a RuntimeException if an unmatched left parenthesis is found
 [x] parse() throws a RuntimeException on unsupported subpatterns
 [x] parse() parses lookahead assertions
 [x] parse() parses negative lookahead assertions
 [x] parse() parses lookbehind assertions
 [x] parse() parses negative lookbehind assertions
 [x] parse() parses escaped right parentheses
 [x] getAllowedCharacterRegexp() works with data set #0
 [x] getAllowedCharacterRegexp() works with data set #1
 [x] getAllowedCharacterRegexp() works with data set #2
 [x] getAllowedCharacterRegexp() works with data set #3
 [x] getAllowedCharacterRegexp() works with data set #4
 [x] getAllowedCharacterRegexp() works with data set #5
 [x] getAllowedCharacterRegexp() works with data set #6
 [x] getAllowedCharacterRegexp() works with data set #7
 [x] getAllowedCharacterRegexp() works with data set #8
 [x] getAllowedCharacterRegexp() works with data set #9
 [x] getAllowedCharacterRegexp() works with data set #10
 [x] getAllowedCharacterRegexp() works with data set #11
 [x] getAllowedCharacterRegexp() works with data set #12
 [x] getAllowedCharacterRegexp() works with data set #13
 [x] getAllowedCharacterRegexp() works with data set #14
 [x] getAllowedCharacterRegexp() works with data set #15
 [x] getAllowedCharacterRegexp() works with data set #16
 [x] getAllowedCharacterRegexp() works with data set #17
 [x] getAllowedCharacterRegexp() works with data set #18
 [x] getAllowedCharacterRegexp() works with data set #19
 [x] getAllowedCharacterRegexp() works with data set #20
 [x] getAllowedCharacterRegexp() works with data set #21
 [x] getAllowedCharacterRegexp() works with data set #22
 [x] getAllowedCharacterRegexp() works with data set #23
 [x] getAllowedCharacterRegexp() works with data set #24
 [x] getAllowedCharacterRegexp() works with data set #25
 [x] getAllowedCharacterRegexp() works with data set #26
 [x] getAllowedCharacterRegexp() works with data set #27
 [x] getAllowedCharacterRegexp() works with data set #28
 [x] getAllowedCharacterRegexp() works with data set #29
 [x] getAllowedCharacterRegexp() works with data set #30
 [x] getAllowedCharacterRegexp() works with data set #31
 [x] getAllowedCharacterRegexp() works with data set #32
 [x] getAllowedCharacterRegexp() works with data set #33
 [x] getAllowedCharacterRegexp() works with data set #34
 [x] getAllowedCharacterRegexp() works with data set #35
 [x] getAllowedCharacterRegexp() works with data set #36
 [x] getAllowedCharacterRegexp() works with data set #37
 [x] getAllowedCharacterRegexp() works with data set #38
 [x] getAllowedCharacterRegexp() works with data set #39
 [x] getAllowedCharacterRegexp() works with data set #40
 [x] getAllowedCharacterRegexp() works with data set #41
 [x] getAllowedCharacterRegexp() works with data set #42
 [x] getAllowedCharacterRegexp() works with data set #43
 [x] getCaptureNames() works with data set #0
 [x] getCaptureNames() works with data set #1
 [x] getCaptureNames() works with data set #2

Rules Helper (s9e\TextFormatter\Tests\Configurator\Helpers\RulesHelper)
 [x] Works with a single tag
 [x] If no rule is defined, the default is to deny children and descendants
 [x] Works with multiple tags
 [x] denyChild overrides allowChild
 [x] denyDescendant does not override allowChild
 [x] allowDescendant does not override denyChild
 [x] denyDescendant overrides allowDescendant
 [x] ignoreTags(true) overrides everything
 [x] ignoreTags(false) has no effect
 [x] Tags with a requireParent rule are not allowed at the root
 [x] Tags that aren't allowed anywhere are omitted from the return array
 [x] Tags that are allowed in a closed dependency loop are omitted from the return array
 [x] Rules targeting inexistent tags do not interfere
 [x] Bitfields are compressed by making tags that are targeted by the same permissions share the same bit number

Template Helper (s9e\TextFormatter\Tests\Configurator\Helpers\TemplateHelper)
 [x] getParametersFromXSL() tests with data set #0
 [x] getParametersFromXSL() tests with data set #1
 [x] getParametersFromXSL() tests with data set #2
 [x] getParametersFromXSL() tests with data set #3
 [x] getParametersFromXSL() tests with data set #4
 [x] getParametersFromXSL() tests with data set #5
 [x] getParametersFromXSL() tests with data set #6
 [x] getParametersFromXSL() tests with data set #7
 [x] getParametersFromXSL() tests with data set #8
 [x] highlightNode() tests with data set #0
 [x] highlightNode() tests with data set #1
 [x] highlightNode() tests with data set #2
 [x] highlightNode() tests with data set #3
 [x] highlightNode() tests with data set #4
 [x] highlightNode() tests with data set #5
 [x] highlightNode() tests with data set #6
 [x] highlightNode() tests with data set #7
 [x] highlightNode() tests with data set #8
 [x] highlightNode() tests with data set #9
 [x] highlightNode() tests with data set #10
 [x] replaceHomogeneousTemplates() tests with data set #0
 [x] replaceHomogeneousTemplates() tests with data set #1
 [x] replaceHomogeneousTemplates() tests with data set #2
 [x] replaceHomogeneousTemplates() tests with data set #3
 [x] replaceHomogeneousTemplates() tests with data set #4
 [x] replaceHomogeneousTemplates() tests with data set #5

Template Inspector (s9e\TextFormatter\Tests\Configurator\Helpers\TemplateInspector)
 [x] evaluate() returns the return value of an XPath expression
 [x] Test cases with data set #0
 [x] Test cases with data set #1
 [x] Test cases with data set #2
 [x] Test cases with data set #3
 [x] Test cases with data set #4
 [x] Test cases with data set #5
 [x] Test cases with data set #6
 [x] Test cases with data set #7
 [x] Test cases with data set #8
 [x] Test cases with data set #9
 [x] Test cases with data set #10
 [x] Test cases with data set #11
 [x] Test cases with data set #12
 [x] Test cases with data set #13
 [x] Test cases with data set #14
 [x] Test cases with data set #15
 [x] Test cases with data set #16
 [x] Test cases with data set #17
 [x] Test cases with data set #18
 [x] Test cases with data set #19
 [x] Test cases with data set #20
 [x] Test cases with data set #21
 [x] Test cases with data set #22
 [x] Test cases with data set #23
 [x] Test cases with data set #24
 [x] Test cases with data set #25
 [x] Test cases with data set #26
 [x] Test cases with data set #27
 [x] Test cases with data set #28
 [x] Test cases with data set #29
 [x] Test cases with data set #30
 [x] Test cases with data set #31
 [x] Test cases with data set #32
 [x] Test cases with data set #33
 [x] Test cases with data set #34
 [x] Test cases with data set #35
 [x] Test cases with data set #36
 [x] Test cases with data set #37
 [x] Test cases with data set #38
 [x] Test cases with data set #39
 [x] Test cases with data set #40
 [x] Test cases with data set #41
 [x] Test cases with data set #42
 [x] Test cases with data set #43
 [x] Test cases with data set #44
 [x] Test cases with data set #45
 [x] Test cases with data set #46
 [x] Test cases with data set #47
 [x] Test cases with data set #48
 [x] Test cases with data set #49
 [x] Test cases with data set #50
 [x] Test cases with data set #51
 [x] Test cases with data set #52
 [x] Test cases with data set #53
 [x] Test cases with data set #54
 [x] Test cases with data set #55
 [x] Test cases with data set #56
 [x] Test cases with data set #57
 [x] Test cases with data set #58
 [x] Test cases with data set #59
 [x] Test cases with data set #60
 [x] Test cases with data set #61
 [x] Test cases with data set #62
 [x] Test cases with data set #63
 [x] Test cases with data set #64
 [x] Test cases with data set #65
 [x] Test cases with data set #66
 [x] Test cases with data set #67
 [x] Test cases with data set #68
 [x] Test cases with data set #69
 [x] Test cases with data set #70
 [x] Test cases with data set #71
 [x] Test cases with data set #72
 [x] Test cases with data set #73
 [x] Test cases with data set #74
 [x] Test cases with data set #75
 [x] Test cases with data set #76
 [x] Test cases with data set #77
 [x] Test cases with data set #78
 [x] Test cases with data set #79
 [x] Test cases with data set #80
 [x] Test cases with data set #81
 [x] Test cases with data set #82
 [x] Test cases with data set #83
 [x] Test cases with data set #84
 [x] Test cases with data set #85
 [x] Test cases with data set #86
 [x] Test cases with data set #87
 [x] Test cases with data set #88
 [x] Test cases with data set #89
 [x] Test cases with data set #90
 [x] Test cases with data set #91
 [x] Test cases with data set #92
 [x] Test cases with data set #93
 [x] Test cases with data set #94
 [x] Test cases with data set #95

Template Loader (s9e\TextFormatter\Tests\Configurator\Helpers\TemplateLoader)
 [x] load() can load 'foo'
 [x] save() correctly handles 'foo'
 [x] load() can load '<xsl:value-of select="@foo"/>'
 [x] load() removes redundant namespace declarations
 [x] save() correctly handles '<xsl:value-of select="@foo"/>'
 [x] save() correctly handles an empty string
 [x] save() removes redundant declarations for the xsl namespace
 [x] load() can load '<ul><li>one<li>two</ul>'
 [x] load() can load '<script>0<1 && 1>0 && alert(1)</script>'
 [x] load() can load '<ul><li>one<li>two</ul>'
 [x] load() accepts unescaped ampersands
 [x] load() converts HTML entities
 [x] load() converts HTML5 entities in XSLT templates
 [x] load() converts HTML5 entities in HTML templates
 [x] load() does not break numeric character references
 [x] load() removes attributes with an invalid name
 [x] load() removes attributes with an invalid namespace in XML
 [x] load() removes attributes with an invalid namespace in HTML
 [x] load() replaces CDATA sections in XML
 [x] load() replaces CDATA sections in HTML
 [x] save() correctly handles '<ul><li>one<li>two</ul>'
 [x] load() throws an exception on malformed XSL
 [x] load() reads HTML as UTF-8
 [x] load() does not load entities

Template Modifier (s9e\TextFormatter\Tests\Configurator\Helpers\TemplateModifier)
 [x] replaceTokens() tests with data set #0
 [x] replaceTokens() tests with data set #1
 [x] replaceTokens() tests with data set #2
 [x] replaceTokens() tests with data set #3
 [x] replaceTokens() tests with data set #4
 [x] replaceTokens() tests with data set #5
 [x] replaceTokens() tests with data set #6
 [x] replaceTokens() tests with data set #7
 [x] replaceTokens() tests with data set #8
 [x] replaceTokens() tests with data set #9
 [x] replaceTokens() tests with data set #10
 [x] replaceTokens() tests with data set #11
 [x] replaceTokens() tests with data set #12
 [x] replaceTokens() tests with data set #13
 [x] replaceTokens() tests with data set #14

Template Parser (s9e\TextFormatter\Tests\Configurator\Helpers\TemplateParser)
 [x] parse() tests with data set #0
 [x] parse() tests with data set #1
 [x] parse() tests with data set #2
 [x] parse() tests with data set #3
 [x] parse() tests with data set #4
 [x] parse() tests with data set #5
 [x] parse() tests with data set #6
 [x] parse() tests with data set #7
 [x] parse() tests with data set #8
 [x] parse() tests with data set #9
 [x] parse() tests with data set #10
 [x] parse() tests with data set #11
 [x] parse() tests with data set #12
 [x] parse() tests with data set #13
 [x] parse() tests with data set #14
 [x] parse() tests with data set #15
 [x] parse() tests with data set #16
 [x] parse() tests with data set #17
 [x] parse() tests with data set #18
 [x] parse() tests with data set #19
 [x] parse() tests with data set #20
 [x] parse() tests with data set #21
 [x] parse() tests with data set #22
 [x] parse() tests with data set #23
 [x] parse() tests with data set #24
 [x] parse() tests with data set #25
 [x] parse() tests with data set #26
 [x] parse() tests with data set #27
 [x] parse() tests with data set #28
 [x] parse() tests with data set #29
 [x] parse() tests with data set #30
 [x] parse() tests with data set #31
 [x] parse() tests with data set #32
 [x] parse() tests with data set #33
 [x] parse() tests with data set #34
 [x] parse() tests with data set #35
 [x] parse() tests with data set #36
 [x] parse() tests with data set #37
 [x] parse() tests with data set #38
 [x] parse() tests with data set #39
 [x] parse() tests with data set #40
 [x] parse() tests with data set #41
 [x] parse() tests with data set #42
 [x] parse() tests with data set #43
 [x] parse() tests with data set #44
 [x] parse() tests with data set #45
 [x] parse() tests with data set #46
 [x] parse() tests with data set #47
 [x] parse() tests with data set #48
 [x] parse() tests with data set #49
 [x] parse() tests with data set #50
 [x] parse() tests with data set #51
 [x] parse() tests with data set #52
 [x] parse() tests with data set #53
 [x] parse() tests with data set #54
 [x] parse() tests with data set #55
 [x] parse() tests with data set #56
 [x] parse() tests with data set #57
 [x] parse() tests with data set #58
 [x] parse() tests with data set #59
 [x] parse() tests with data set #60
 [x] parse() tests with data set #61
 [x] parse() tests with data set #62
 [x] parse() tests with data set #63
 [x] parse() tests with data set #64
 [x] parse() tests with data set #65
 [x] parse() tests with data set #66
 [x] parse() tests with data set #67
 [x] parse() throws an exception if it encounters a processing instruction in the stylesheet
 [x] parse() throws an exception if it encounters an unsupported XSL element
 [x] parse() throws an exception if it encounters an unsupported <xsl:copy/> expression

XPath Helper (s9e\TextFormatter\Tests\Configurator\Helpers\XPathHelper)
 [x] getVariables() tests with data set #0
 [x] getVariables() tests with data set #1
 [x] getVariables() tests with data set #2
 [x] getVariables() tests with data set #3
 [x] isExpressionNumeric() tests with data set #0
 [x] isExpressionNumeric() tests with data set #1
 [x] isExpressionNumeric() tests with data set #2
 [x] isExpressionNumeric() tests with data set #3
 [x] isExpressionNumeric() tests with data set #4
 [x] isExpressionNumeric() tests with data set #5
 [x] isExpressionNumeric() tests with data set #6
 [x] isExpressionNumeric() tests with data set #7
 [x] isExpressionNumeric() tests with data set #8
 [x] isExpressionNumeric() tests with data set #9
 [x] isExpressionNumeric() tests with data set #10
 [x] isExpressionNumeric() tests with data set #11
 [x] isExpressionNumeric() tests with data set #12
 [x] isExpressionNumeric() tests with data set #13
 [x] isExpressionNumeric() tests with data set #14
 [x] isExpressionNumeric() tests with data set #15
 [x] isExpressionNumeric() tests with data set #16
 [x] isExpressionNumeric() tests with data set #17
 [x] isExpressionNumeric() tests with data set #18
 [x] isExpressionNumeric() tests with data set #19
 [x] isExpressionNumeric() tests with data set #20
 [x] minify() tests with data set #0
 [x] minify() tests with data set #1
 [x] minify() tests with data set #2
 [x] minify() tests with data set #3
 [x] minify() tests with data set #4
 [x] minify() tests with data set #5
 [x] minify() tests with data set #6
 [x] minify() tests with data set #7
 [x] minify() tests with data set #8
 [x] minify() tests with data set #9
 [x] minify() tests with data set #10
 [x] minify() tests with data set #11
 [x] minify() tests with data set #12
 [x] minify() tests with data set #13
 [x] minify() tests with data set #14
 [x] minify() tests with data set #15
 [x] minify() tests with data set #16
 [x] minify() tests with data set #17
 [x] minify() tests with data set #18
 [x] minify() tests with data set #19
 [x] minify() tests with data set #20
 [x] minify() tests with data set #21
 [x] minify() tests with data set #22
 [x] minify() tests with data set #23
 [x] minify() tests with data set #24
 [x] minify() tests with data set #25
 [x] minify() tests with data set #26
 [x] minify() tests with data set #27
 [x] minify() tests with data set #28
 [x] Parse equality expr with data set #0
 [x] Parse equality expr with data set #1
 [x] Parse equality expr with data set #2
 [x] Parse equality expr with data set #3
 [x] Parse equality expr with data set #4
 [x] Parse equality expr with data set #5
 [x] Parse equality expr with data set #6
 [x] Parse equality expr with data set #7
 [x] encodeStrings() works
 [x] decodeStrings() works

Attribute (s9e\TextFormatter\Tests\Configurator\Items\Attribute)
 [x] An array of options can be passed to the constructor
 [x] $attr->filterChain can be assigned an array
 [x] asConfig() correctly produces a config array
 [x] isSafeAsURL() returns FALSE by default
 [x] isSafeAsURL() returns TRUE if any filter is safe in context
 [x] markAsSafeAsURL() unconditionally marks the attribute as safe in context
 [x] isSafeInCSS() returns FALSE by default
 [x] isSafeInCSS() returns TRUE if any filter is safe in context
 [x] markAsSafeInCSS() unconditionally marks the attribute as safe in context
 [x] isSafeInJS() returns FALSE by default
 [x] isSafeInJS() returns TRUE if any filter is safe in context
 [x] markAsSafeInJS() unconditionally marks the attribute as safe in context

Attribute Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilter)
 [x] Sets the filter's signature to ['attrValue' => null]
 [x] isSafeInCSS() returns FALSE by default
 [x] isSafeInCSS() returns TRUE if markAsSafeInCSS() is called
 [x] isSafeInJS() returns FALSE by default
 [x] isSafeInJS() returns TRUE if markAsSafeInCSS() is called
 [x] isSafeInJS() returns TRUE if the callback is 'rawurlencode'
 [x] isSafeInJS() returns TRUE if the callback is 'strtotime'
 [x] isSafeInJS() returns TRUE if the callback is 'urlencode'
 [x] isSafeAsURL() returns FALSE by default
 [x] isSafeAsURL() returns TRUE if markAsSafeAsURL() is called

Attribute Preprocessor (s9e\TextFormatter\Tests\Configurator\Items\AttributePreprocessor)
 [x] __construct() throws an InvalidArgumentException if the regexp is not valid
 [x] getAttributes() returns an array where keys are the name of the named subpatterns/attributes and values is the regexp that exactly matches them
 [x] getAttributes() preserves the original's regexp "i", "s" and "u" flags
 [x] getRegexp() returns the regexp associated with this attribute preprocessor

Programmable Callback (s9e\TextFormatter\Tests\Configurator\Items\ProgrammableCallback)
 [x] __construct() throws an InvalidArgumentException if its argument is not callable
 [x] An array of variables can be set with setVars() or retrieved with getVars()
 [x] setVars() is chainable
 [x] A single variable can be set with setVar() without overwriting other variables
 [x] setVars() is chainable
 [x] addParameterByValue() adds a parameter as a value with no name
 [x] addParameterByValue() is chainable
 [x] addParameterByName() adds a parameter as a name with no value
 [x] addParameterByName() throws an exception when the same parameter is added twice
 [x] addParameterByName() is chainable
 [x] resetParameters() removes all parameters
 [x] resetParameters() is chainable
 [x] Callback '\\strtotime' is normalized to 'strtotime'
 [x] Callback ['foo','bar'] is normalized to 'foo::bar'
 [x] Callback ['\\foo','bar'] is normalized to 'foo::bar'
 [x] getCallback() returns the callback
 [x] getJS() returns 'returnFalse' by default
 [x] getJS() returns a JavaScript source for known functions
 [x] getJS() returns NULL if no JS was set and the callback is a function that is not found in Configurator/JavaScript/functions/
 [x] setJS() accepts a string and normalizes it to an instance of Code
 [x] setJS() accepts an instance of Code
 [x] setJS() is chainable
 [x] asConfig() returns an array containing the callback
 [x] asConfig() replaces the by-name parameters by the values stored in vars if available
 [x] asConfig() returns the callback's JavaScript as a Code object if available
 [x] asConfig() replaces values that implement ConfigProvider with their config value
 [x] asConfig() recurses into params via ConfigHelper::toArray() to convert structures to arrays
 [x] asConfig() preserves NULL values and empty arrays in the callback's parameters

Alnum Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\AlnumFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS
 [x] Is safe in URL

Choice Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\ChoiceFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] __construct() forwards its arguments to setValues()
 [x] setValues() creates a regexp that matches all given values (case-insensitive) and calls setRegexp()
 [x] setValues() creates a case-sensitive regexp if its second argument is TRUE
 [x] setValues() creates a Unicode-aware regexp if any values are non-ASCII
 [x] setValues() throws an exception if its second argument is not a boolean

Color Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\ColorFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS

Email Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\EmailFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\EmailFilter::filter()

False Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\FalseFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\FalseFilter::filter()

Float Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\FloatFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NumericFilter::filterFloat()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Fontfamily Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\FontfamilyFilter)
 [x] Is safe as URL
 [x] Is safe in CSS
 [x] Is not safe in JS

Hashmap Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\HashmapFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\HashmapFilter::filter()
 [x] __construct() forwards its arguments to setMap()
 [x] asConfig() throws an exception if the 'map' var is missing
 [x] asConfig() returns an array
 [x] Creates a sparse map by default
 [x] Creates a strict map if the second argument is TRUE
 [x] Throws an exception if the second argument is not a boolean
 [x] Values identical to their key are optimized away if the map is sparse
 [x] Values identical to their key are preserved if the map is strict
 [x] isSafeInCSS() returns false if the map is not strict
 [x] isSafeInCSS() returns true if the map is strict
 [x] isSafeInCSS() returns false if a value in the map contains a parenthesis
 [x] isSafeInCSS() returns false if a value in the map contains a colon
 [x] isSafeInCSS() returns false if a value in the map contains a semicolon
 [x] isSafeInJS() returns false if the map is not strict
 [x] isSafeInJS() returns true if the map is strict
 [x] isSafeInJS() returns false if a value in the map contains a parenthesis
 [x] isSafeInJS() returns false if a value in the map contains a single quote
 [x] isSafeInJS() returns false if a value in the map contains a double quote
 [x] isSafeInJS() returns false if a value in the map contains \r or \n
 [x] isSafeInJS() returns false if a value in the map contains U+2028
 [x] isSafeInJS() returns false if a value in the map contains U+2029
 [x] Changing the map's content resets the filter's safeness
 [x] Changing the map's strictness resets the filter's safeness

Identifier Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\IdentifierFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS
 [x] Is safe in URL

Int Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\IntFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NumericFilter::filterInt()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Ip Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\IpFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NetworkFilter::filterIp()

Ipport Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\IpportFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NetworkFilter::filterIpport()

Ipv4 Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ipv4Filter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NetworkFilter::filterIpv4()

Ipv6 Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ipv6Filter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NetworkFilter::filterIpv6()

Map Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\MapFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\MapFilter::filter()
 [x] __construct() forwards its arguments to setMap()
 [x] asConfig() throws an exception if the 'map' var is missing
 [x] asConfig() returns an array
 [x] setMap() creates case-insensitive regexps by default
 [x] setMap() creates case-sensitive regexps if its second argument is TRUE
 [x] setMap() appends a catch-all regexp that maps to FALSE if its third argument is TRUE
 [x] setMap() uses the pattern modifier 'u' if a regexp is not entirely ASCII
 [x] setMap() throws an exception if the second argument is not a boolean
 [x] setMap() throws an exception if the third argument is not a boolean
 [x] isSafeInCSS() returns false if the map is not strict
 [x] isSafeInCSS() returns true if the map is strict
 [x] isSafeInCSS() returns false if a safe map is replaced with an unsafe map state
 [x] isSafeInCSS() returns false if a value in the map contains a parenthesis
 [x] isSafeInCSS() returns false if a value in the map contains a colon
 [x] isSafeInCSS() returns false if a value in the map contains a semicolon
 [x] isSafeInJS() returns false if the map is not strict
 [x] isSafeInJS() returns true if the map is strict
 [x] isSafeInJS() returns false if a safe map is replaced with an unsafe map state
 [x] isSafeInJS() returns false if a value in the map contains a parenthesis
 [x] isSafeInJS() returns false if a value in the map contains a single quote
 [x] isSafeInJS() returns false if a value in the map contains a double quote
 [x] isSafeInJS() returns false if a value in the map contains \r or \n
 [x] isSafeInJS() returns false if a value in the map contains U+2028
 [x] isSafeInJS() returns false if a value in the map contains U+2029

Number Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\NumberFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Range Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\RangeFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NumericFilter::filterRange()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL
 [x] __construct() forwards its arguments to setRange()
 [x] asConfig() throws an exception if the 'min' var is missing
 [x] asConfig() throws an exception if the 'max' var is missing
 [x] asConfig() returns an array
 [x] setRange() sets the 'min' and 'max' vars
 [x] setRange() throws an exception if the first argument is not a number
 [x] setRange() throws an exception if the second argument is not a number
 [x] setRange() throws an exception if the min value is greater than the max value

Regexp Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\RegexpFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is not safe as URL
 [x] Is safe as URL if the regexp is /^[a-z]$/
 [x] Is safe as URL if the regexp is /^foo:(.*)/
 [x] Is not safe as URL if the regexp is /^foo:(.*)/m
 [x] Is safe as URL if the regexp is /^https?:(.*)/
 [x] Is safe as URL if the regexp is /^(https?:.*)/
 [x] Is safe as URL if the regexp is /^(?:https?:.*)/
 [x] Is not safe as URL if the regexp is /^javascript:(.*)/
 [x] Is not safe as URL if the regexp is /^javascriptx?:(.*)/
 [x] Is not safe as URL if the regexp allows a colon to be used
 [x] Is not safe as URL if the regexp is invalid
 [x] Is not safe as URL if the regexp can't be parsed
 [x] Is safe in CSS if the regexp is /^(?:left|right|center)$/
 [x] Is safe in CSS if the regexp is /^[a-z]$/
 [x] Is not safe in CSS if the regexp is /^[A-z]$/ because it would allow backslashes
 [x] Is not safe in CSS if the regexp is invalid
 [x] Is not safe in CSS if no regexp is set
 [x] Is safe in JS if the regexp is /^\d+$/D
 [x] Is safe in JS if the regexp is /^[0-9]+$/D
 [x] Is safe in JS if the regexp is /^(?:[0-9]+)$/D
 [x] Is safe in JS if the regexp is /^\w++$/D
 [x] Is not safe in JS if the regexp is /^\W++$/D
 [x] Is not safe in JS if the regexp is /^\d+/D
 [x] Is not safe in JS if the regexp is /\d+$/D
 [x] Is not safe in JS if the regexp is /^\d+$/
 [x] Is not safe in JS if the regexp is /^\d+$/Dm
 [x] __construct() forwards its arguments to setRegexp()
 [x] getRegexp() returns the filter's regexp
 [x] setRegexp() sets the filter's regexp
 [x] setRegexp() throws an exception if the regexp is invalid
 [x] asConfig() returns an array
 [x] asConfig() throws an exception if the 'regexp' var is missing
 [x] asConfig() creates a Regexp instance
 [x] Changing the regexp resets the filter's safeness
 [x] Template safeness can be set manually

Simpletext Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\SimpletextFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS

Timestamp Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\TimestampFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\RegexpFilter::filter()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Uint Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\UintFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\NumericFilter::filterUint()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Url Filter (s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\UrlFilter)
 [x] Callback is s9e\TextFormatter\Parser\AttributeFilters\UrlFilter::filter()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

Regexp (s9e\TextFormatter\Tests\Configurator\Items\Regexp)
 [x] __construct() throws an InvalidArgumentException if the regexp is not valid
 [x] Can be cast as a string
 [x] getJS() returns the regexp as a string
 [x] setJS() can set a custom regexp
 [x] Is a config provider
 [x] Returns itself as config
 [x] The JS regexp has a global flag if isGlobal is true
 [x] getNamedCaptures() returns an array where keys are the name of the named captures and values are regexps that exactly match them
 [x] getNamedCaptures() puts the expression in a non-capturing subpattern if it contains any alternations
 [x] getNamedCaptures() preserves the original's regexp "i", "s" and "u" flags
 [x] getCaptureNames() returns the names of all captures
 [x] filterConfig('PHP') returns the regexp as a string
 [x] filterConfig('JS') returns a Code object

Tag (s9e\TextFormatter\Tests\Configurator\Items\Tag)
 [x] An array of options can be passed to the constructor
 [x] $tag->attributePreprocessors can be assigned a 2D array of regexps
 [x] $tag->attributePreprocessors can be assigned an instance of AttributePreprocessorCollection to copy its content
 [x] Setting $tag->attributePreprocessors clears previous attributePreprocessors
 [x] $tag->nestingLimit accepts '10' and casts it as an integer
 [x] $tag->nestingLimit rejects non-numbers
 [x] $tag->nestingLimit rejects numbers less than 1
 [x] $tag->rules can be assigned a 2D array of rules
 [x] $tag->rules can be assigned an instance of Ruleset to copy its content
 [x] Setting $tag->rules clears previous rules
 [x] $tag->tagLimit accepts '10' and casts it as an integer
 [x] $tag->tagLimit rejects non-numbers
 [x] $tag->tagLimit rejects numbers less than 1
 [x] $tag->template = 'foo' set the tag's template to an instance of Template
 [x] $tag->template returns the tag's template
 [x] isset($tag->template) is supported
 [x] unset($tag->template) is supported
 [x] asConfig() produces a config array, omitting properties that are not needed during parsing such as template
 [x] $tag->filterChain starts with FilterProcessing::executeAttributePreprocessors by default
 [x] $tag->filterChain contains FilterProcessing::filterAttributes by default
 [x] asConfig() omits 'FilterProcessing::executeAttributePreprocessors' from the returned filterChain if no attribute preprocessor is defined
 [x] asConfig() does not modify the tag's filterChain itself

Tag Filter (s9e\TextFormatter\Tests\Configurator\Items\TagFilter)
 [x] Sets the filter's signature to ['tag' => null]

Template (s9e\TextFormatter\Tests\Configurator\Items\Template)
 [x] When cast as string, returns the template's content
 [x] getParameters() returns the list of parameters used in this template
 [x] asDOM() returns the template as a DOMDocument
 [x] getCSSNodes() returns all nodes that normally contain CSS
 [x] getJSNodes() returns all nodes that normally contain JS
 [x] getURLNodes() returns all nodes that normally contain a URL
 [x] isNormalized() returns false by default
 [x] isNormalized() returns true if normalize() was called
 [x] isNormalized(true) sets it to true
 [x] isNormalized(false) sets it to false
 [x] getInspector() returns an instance of TemplateInspector based on this template's content
 [x] normalize() resets the cached instance of TemplateInspector
 [x] replaceTokens() performs regexp-based replacements on the template's content
 [x] replaceTokens() resets the cached instance of TemplateInspector
 [x] replaceTokens() resets isNormalized
 [x] Unknown methods such as isBlock() and isPassthrough() are forwarded to this template's TemplateInspector instance
 [x] setContent() updates the template's content

Template Document (s9e\TextFormatter\Tests\Configurator\Items\TemplateDocument)
 [x] saveChanges() updates the document's original template

Callback Generator (s9e\TextFormatter\Tests\Configurator\CallbackGenerator)
 [x] replaceCallbacks() tests with data set #0
 [x] replaceCallbacks() tests with data set #1
 [x] replaceCallbacks() tests with data set #2
 [x] replaceCallbacks() tests with data set #3
 [x] replaceCallbacks() tests with data set #4
 [x] replaceCallbacks() tests with data set #5
 [x] replaceCallbacks() tests with data set #6

Code (s9e\TextFormatter\Tests\Configurator\JavaScript\Code)
 [x] Can be cast as a string
 [x] __toString() always returns a string
 [x] filterConfig('PHP') returns null
 [x] filterConfig('PHP') returns the Code instance

Config Optimizer (s9e\TextFormatter\Tests\Configurator\ConfigOptimizer)
 [x] reset() clears the stored objects
 [x] OptimizeObject tests with data set #0
 [x] OptimizeObject tests with data set #1
 [x] OptimizeObject tests with data set #2
 [x] OptimizeObject tests with data set #3
 [x] OptimizeObject tests with data set #4
 [x] OptimizeObject tests with data set #5
 [x] OptimizeObject tests with data set #6

Config Value (s9e\TextFormatter\Tests\Configurator\JavaScript\ConfigValue)
 [x] getUseCount() returns 0 by default
 [x] getValue() returns the original value
 [x] getVarName() returns the assigned variable name
 [x] incrementUseCount() increments the use count by 1
 [x] deduplicate() doesn't do anything if the use count is 1
 [x] deduplicate() marks the value as deduplicated if the use count is 2
 [x] deduplicate() sets the use counter of the instance to 1
 [x] deduplicate() decrements the use counter of config values contained in the instance
 [x] deduplicate() decrements the use counter of config values contained in the instance

Dictionary (s9e\TextFormatter\Tests\Configurator\Dictionary)
 [x] filterConfig('PHP') returns an array
 [x] filterConfig('JS') returns an equal but different instance of Dictionary
 [x] filterConfig('JS') filters the dictionary's content

Encoder (s9e\TextFormatter\Tests\Configurator\Encoder)
 [x] encode() tests with data set #0
 [x] encode() tests with data set #1
 [x] encode() tests with data set #2
 [x] encode() tests with data set #3
 [x] encode() tests with data set #4
 [x] encode() tests with data set #5
 [x] encode() tests with data set #6
 [x] encode() tests with data set #7
 [x] encode() tests with data set #8
 [x] encode() tests with data set #9
 [x] encode() tests with data set #10
 [x] encode() tests with data set #11
 [x] encode() tests with data set #12
 [x] encode() tests with data set #13
 [x] encode() tests with data set #14
 [x] encode() tests with data set #15
 [x] encode() tests with data set #16
 [x] encode() tests with data set #17
 [x] encode() tests with data set #18
 [x] encode() does not quote legal property names
 [x] encode() quotes illegal property names
 [x] encode() throws an exception on unsupported types
 [x] encode() throws an exception on unsupported objects
 [x] encode() properly encodes deduplicated config values

Function Provider (s9e\TextFormatter\Tests\Configurator\JavaScript\FunctionProvider)
 [x] get() will return the source from cache if available
 [x] get() will return the source from the filesystem if applicable
 [x] get() will throw an exception if the function can't be sourced

Hint Generator (s9e\TextFormatter\Tests\Configurator\HintGenerator)
 [x] HINT.attributeDefaultValue=0 by default
 [x] HINT.attributeDefaultValue=1 if any attribute has a defaultValue
 [x] HINT.closeAncestor=0 by default
 [x] HINT.closeAncestor=1 if any tag has a closeAncestor rule
 [x] HINT.closeParent=0 by default
 [x] HINT.closeParent=1 if any tag has a closeParent rule
 [x] HINT.createChild=0 by default
 [x] HINT.createChild=1 if any tag has a createChild rule
 [x] HINT.fosterParent=0 by default
 [x] HINT.fosterParent=1 if any tag has a fosterParent rule
 [x] HINT.namespaces=0 by default
 [x] HINT.namespaces=1 if any tag has a namespaces rule
 [x] HINT.onRender=0 by default
 [x] HINT.onRender=1 if "data-s9e-livepreview-onrender" appears in the stylesheet
 [x] HINT.ignoreAttrs=0 by default
 [x] HINT.ignoreAttrs=1 if "data-s9e-livepreview-ignore-attrs" appears in the stylesheet
 [x] HINT.hash=0 by default
 [x] HINT.hash=1 if "data-s9e-livepreview-hash" appears in the stylesheet
 [x] HINT.requireAncestor=0 by default
 [x] HINT.requireAncestor=1 if any tag has a requireAncestor rule
 [x] HINT.RULE_AUTO_CLOSE=0 by default
 [x] HINT.RULE_AUTO_CLOSE=1 if any tag has an autoClose rule
 [x] HINT.RULE_AUTO_REOPEN=0 by default
 [x] HINT.RULE_AUTO_REOPEN=1 if any tag has an autoReopen rule
 [x] HINT.RULE_BREAK_PARAGRAPH=0 by default
 [x] HINT.RULE_BREAK_PARAGRAPH=1 if any tag has a breakParagraph rule
 [x] HINT.RULE_CREATE_PARAGRAPHS=0 by default
 [x] HINT.RULE_CREATE_PARAGRAPHS=1 if any tag has a createParagraphs rule
 [x] HINT.RULE_CREATE_PARAGRAPHS=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_IGNORE_TEXT=0 by default
 [x] HINT.RULE_IGNORE_TEXT=1 if any tag has an ignoreText rule
 [x] HINT.RULE_IGNORE_TEXT=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_IGNORE_WHITESPACE=0 by default
 [x] HINT.RULE_IGNORE_WHITESPACE=1 if any tag has an ignoreSurroundingWhitespace rule
 [x] HINT.RULE_IS_TRANSPARENT=0 by default
 [x] HINT.RULE_IS_TRANSPARENT=1 if any tag has an isTransparent rule
 [x] HINT.RULE_TRIM_FIRST_LINE=0 by default
 [x] HINT.RULE_TRIM_FIRST_LINE=1 if any tag has an trimFirstLine rule
 [x] HINT.regexp=0 by default
 [x] HINT.regexp=1 if a plugin has a regexp
 [x] HINT.regexpLimit=0 by default
 [x] HINT.regexpLimit=1 if a plugin has a regexpLimit
 [x] Contains hints from plugins

Regexp Convertor (s9e\TextFormatter\Tests\Configurator\JavaScript\RegexpConvertor)
 [x] toJS() can convert plain regexps
 [x] toJS() escapes forward slashes
 [x] toJS() does not double-escape forward slashes that are already escaped
 [x] toJS() does not "eat" backslashes while escaping forward slashes
 [x] toJS() can convert regexps with the "i" modifier
 [x] toJS() can convert regexps with capturing subpatterns
 [x] toJS() can convert regexps with non-capturing subpatterns
 [x] toJS() can convert regexps with non-capturing subpatterns with a quantifier
 [x] toJS() converts greedy quantifiers to normal quantifiers in non-capturing subpatterns
 [x] toJS() throws a RuntimeException on options (?i)
 [x] toJS() removes option (?J)
 [x] toJS() throws a RuntimeException on subpattern options (?i:)
 [x] toJS() can convert regexps with character classes with a quantifier
 [x] toJS() converts greedy quantifiers to normal quantifiers in character classes
 [x] toJS() replaces \pL with the full character range in character classes
 [x] toJS() replaces \p{L} with the full character range in character classes
 [x] toJS() replaces \pL outside of character classes with a character class containing the full character range
 [x] toJS() replaces \p{L} outside of character classes with a character class containing the full character range
 [x] toJS() replaces \p{^L} with a character class equivalent to \PL
 [x] toJS() replaces \P{^L} with a character class equivalent to \pL
 [x] toJS() replaces \PZl with the opposite character range of \pZl
 [x] toJS() can convert regexps with lookahead assertions
 [x] toJS() can convert regexps with negative lookahead assertions
 [x] toJS() throws a RuntimeException on lookbehind assertions
 [x] toJS() throws a RuntimeException on negative lookbehind assertions
 [x] toJS() converts . to [\s\S] outside of character classes if the "s" modifier is set
 [x] toJS() does not convert . to [\s\S] if the "s" modifier is not set
 [x] toJS() does not convert . inside of character classes
 [x] toJS() converts named captures into normal captures
 [x] toJS() correctly converts /(?:foo)(?<z>bar)/ to /(?:foo)(bar)/
 [x] toJS() converts atomic groups to non-capturing groups
 [x] toJS('//') returns /(?:)/
 [x] toJS('/x/') returns /x/
 [x] toJS('/x/', true) returns /x/g
 [x] toJS() converts literal ASCII line terminators \r and \n
 [x] toJS() converts literal Unicode line terminators \u2028 and \u2029
 [x] toJS() escapes backslashes that precede literal line terminators
 [x] toJS() replaces \x{27bf} with \u27bf
 [x] toJS() replaces \x{27BF} with \u27BF
 [x] toJS() replaces \\\x{27BF} with \\\u27BF
 [x] toJS() preserves \\x{27BF}

Minifier (s9e\TextFormatter\Tests\Configurator\JavaScript\Minifier)
 [x] get() forwards the call to minify() and returns its result
 [x] Caching is disabled if cacheDir is not set
 [x] Caching is enabled if cacheDir is set
 [x] get() returns the cached result if applicable
 [x] get() rethrows exception thrown during minification by default
 [x] get() discards exceptions thrown during minification and instead returns the original source if keepGoing is TRUE
 [x] getCacheDifferentiator() returns a default constant

First Available (s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\FirstAvailable)
 [x] Constructor accepts any number of known minifiers
 [x] getCacheDifferentiator() is constant
 [x] minify() returns the result of the first minification if applicable
 [x] minify() returns the result of the second minification if the first throws an exception
 [x] minify() throws an exception if no minifier is set
 [x] minify() throws an exception if no minifier success

Closure Compiler Application (s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\ClosureCompilerApplication)
 [x] Constructor accepts a command
 [x] Throws an exception if the JavaScript is invalid
 [x] Allows caching
 [x] The cache key depends on the compilation level
 [x] The cache key depends on the extra options
 [x] The cache key depends on the command
 [x] The cache key depends on whether the default externs are excluded
 [x] If the default externs are excluded, the custom externs are baked into the cache key
 [x] Works
 [x] minify() throws an exception if an error occurs during minification
 [x] Replaces the default externs with custom externs if compilationLevel is ADVANCED_OPTIMIZATIONS and excludeDefaultExterns is true

Closure Compiler Service (s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\ClosureCompilerService)
 [ ] Works

